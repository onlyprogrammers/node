function getEventPath(event) {
    try {
        if ('composedPath' in event) {
            const path = event.composedPath();
            if (path.length) {
                return path;
            }
        }
        else if ('path' in event && event.path.length) {
            return event.path;
        }
        return null;
    }
    catch (_a) {
        return null;
    }
}
function generateNodePath(path) {
    if (!path || !Array.isArray(path)) {
        return '';
    }
    let nodePath = '';
    for (let i = path.length > 3 ? 3 : path.length - 1; i >= 0; i--) {
        let intermediateNodePath = '';
        let aPath = path[i];
        if (aPath && aPath.tagName && aPath.attributes && aPath.attributes.length) {
            if (i > 0)
                intermediateNodePath = aPath.tagName.toLowerCase() + getNodeAttributeValues(aPath.attributes) + ' > ';
            else
                intermediateNodePath = aPath.tagName.toLowerCase() + getNodeAttributeValues(aPath.attributes);
            nodePath = nodePath + intermediateNodePath;
        }
    }
    return nodePath;
}
function getNodeAttributeValues(attrObj) {
    let attributeValue = '';
    if (!attrObj || (attrObj && !attrObj.length)) {
        return attributeValue;
    }
    Object.values(attrObj).forEach((attr) => {
        if (attr && attr.nodeName) {
            let key = attr.nodeName;
            let value = attr.nodeValue;
            if (key == 'class') {
                attributeValue = attributeValue + '.' + value;
            }
            else if (key == 'id') {
                attributeValue = attributeValue + '#' + value;
            }
            else if (key == 'type') {
                attributeValue = attributeValue + `[${key}="${value}"]`;
            }
            else if (key == 'value') {
                attributeValue = attributeValue + '.' + value;
            }
        }
    });
    return attributeValue;
}
function getNodePathFromEvent(event) {
    const eventPath = getEventPath(event);
    return eventPath ? generateNodePath(eventPath) : '';
}
function isDeadClick(event) {
    const target = event.target;
    const nodeName = target ? target === null || target === void 0 ? void 0 : target.nodeName.toLowerCase() : '';
    const isClickable = ((target instanceof HTMLAnchorElement) || (target.onclick !== null) || (target.hasAttribute('onclick')));
    if (nodeName === 'a' || isClickable) {
        return false;
    }
    else {
        return true;
    }
}
function getTextContent(event) {
    let eventTarget = event.target;
    if (eventTarget) {
        const innerText = eventTarget.innerText || '';
        return innerText;
    }
    else {
        console.error("Event target is not an HTML element.");
        return '';
    }
}
function getElementSize(event) {
    let eventTarget = event.target;
    if (eventTarget) {
        const elementHeight = eventTarget.clientHeight;
        const elementWidth = eventTarget.clientWidth;
        return [elementHeight, elementWidth];
    }
    else {
        console.error("Event target is not an HTML element.");
        return [0, 0];
    }
}
function getUniqueSelector(event) {
    let eventTarget = event.target;
    if (eventTarget) {
        if (!eventTarget || !eventTarget.parentNode) {
            return null;
        }
        const selector = [];
        let target = event.target;
        while (target) {
            let tagName = target.tagName.toLowerCase();
            let index = Array.from(target.parentNode.children).indexOf(target) + 1;
            if (tagName !== "body") {
                const indexStr = index > 1 ? `:nth-child(${index})` : "";
                selector.unshift(tagName + indexStr);
            }
            else {
                selector.unshift(tagName);
            }
            target = target.parentNode instanceof HTMLElement ? target.parentNode : null;
        }
        return selector.join(" > ");
    }
    return null;
}
function isRageClick(currentClickTime, lastClickTime) {
    const rageClickThreshold = 3000;
    const timeSinceLastClick = currentClickTime - lastClickTime;
    if (timeSinceLastClick < rageClickThreshold) {
        return true;
    }
    return false;
}

export { getElementSize, getNodePathFromEvent, getTextContent, getUniqueSelector, isDeadClick, isRageClick };
